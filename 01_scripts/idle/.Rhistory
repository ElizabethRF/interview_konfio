setwd("C:/R")
ls
clearPushBack()
german.data.all.numeric <- read.csv("C:/R/data/ds-interview-master-e14b10f59c0f541d27a1f18b905ca0d4433172a4/german.data.all-numeric.csv")
View(german.data.all.numeric)
german.data.all.numeric <- read.csv("C:/R/data/ds-interview-master-e14b10f59c0f541d27a1f18b905ca0d4433172a4/german.data.all-numeric.csv")
View(german.data.all.numeric)
calss
data_credit<- read.csv("C:/R/data/ds-interview-master-e14b10f59c0f541d27a1f18b905ca0d4433172a4/german.data.all-numeric.csv"
data_credit<- read.csv("C:/R/data/ds-interview-master-e14b10f59c0f541d27a1f18b905ca0d4433172a4/german.data.all-numeric.csv")
data_credit<- read.csv("C:/R/data/ds-interview-master-e14b10f59c0f541d27a1f18b905ca0d4433172a4/german.data.all-numeric.csv")
data_credit
class(data_credit)
dpois(c(1), 20)
dpois(c(1), 20)
dpois(c(1), 0.5)
dpois(c(1), 0.5)
dpois(c(1), 0.5)
dpois(c(1), 0.5)
dpois(c(0.5), 20)
dpois(c(1), 20)
rpois(1, 20)
rpois(1, 20)
rpois(1, 20)
rpois(1, 0.5)
rpois(1, 0.5)
rpois(2, 0.5)
rpois(100,1 )
rpois(1000,1 )
rpois(1000,20 )
nrow(data_credit)
View(data_credit)
View(data_credit)
data_credit$is_good
match(data_credit$is_good,1)
data_credit[21][i]
data_credit$is_good[i]
data_credit$is_good[1]
for (i in 999:nrow(data_credit)){
data_credit$is_good[i]
}
;
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
rpois(1, 20)
rpois(1, 20)
distribucion <-rpois(1000, 20)
distribucion[2]
distribucion
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
distribucion
data_credit$day_to_pay<-  distribucion[1]
data_credit$day_to_pay
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
distribucion
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
install.packages("http://www.bnlearn.com/releases/bnlearn_latest.tar.gz")
install.packages("bnlearn")
library(bnlearn)
library(bnlearn)
source('C:/R/run_interview.r', encoding = 'UTF-8')
source('C:/R/run_interview.r', encoding = 'UTF-8')
install.packages
install.packages("bnlearn")
source('C:/R/run_interview.r', encoding = 'UTF-8')
install.packages("bnlearn")
install.packages("bnlearn")
install.packages("bnlearn")
source('C:/R/run_interview.r', encoding = 'UTF-8')
cptA = matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
cptA
cptB = matrix(c(0.8, 0.2), ncol = 2, dimnames = list(NULL, c("GOOD", "BAD")))
cptB
cptC = c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8)
dim(cptC) = c(2, 2, 2)
cptC
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "HIGH"),
+                    "B" = c("GOOD", "BAD"))
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "HIGH"), "B" = c("GOOD", "BAD"))
cptC
net = model2network("[A][B][C|A:B]")
dfit = custom.fit(net, dist = list(A = cptA, B = cptB, C = cptC))
dfit
dfit
dfit
class(dfit)
data(learning.test)
res = gs(learning.test)
plot(res)
install.packages('klaR')
library(klaR)
library(ROCR)
install.packages('ROCR')
install.packages('ROCR')
library(klaR)
library(ROCR)
library(ROCR)
library(e1071)
install.packages('e1071')
library(e1071)
nb_default <- naiveBayes(response~., data=train[,-4])
nb_default <- naiveBayes(response~., data=train[,-4])
default_pred <- predict(nb_default, test, type="class")
